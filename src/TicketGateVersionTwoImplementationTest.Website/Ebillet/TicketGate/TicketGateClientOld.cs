//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name = "TicketGateSoap", Namespace = "http://www.ebillet.dk/system/")]
public partial class TicketGateClientOld : System.Web.Services.Protocols.SoapHttpClientProtocol
{

    private AuthHeader authHeaderValueField;

    private System.Threading.SendOrPostCallback BookOperationCompleted;

    private System.Threading.SendOrPostCallback GetHistoryOperationCompleted;

    private System.Threading.SendOrPostCallback ActivateReservationOperationCompleted;

    private System.Threading.SendOrPostCallback GetReservationInfoOperationCompleted;

    private System.Threading.SendOrPostCallback SeatsImageOperationCompleted;

    private System.Threading.SendOrPostCallback SendTestReceiptOperationCompleted;

    private System.Threading.SendOrPostCallback OnDemandCreateOperationCompleted;

    private System.Threading.SendOrPostCallback OnDemandChangeOperationCompleted;

    private System.Threading.SendOrPostCallback OnDemandReleaseOperationCompleted;

    private System.Threading.SendOrPostCallback OnDemandAddOnOperationCompleted;

    private System.Threading.SendOrPostCallback NotifyBuyerAboutRefundOperationCompleted;

    private System.Threading.SendOrPostCallback OnDemandAllocateOperationCompleted;

    private System.Threading.SendOrPostCallback CheckUserOperationCompleted;

    private System.Threading.SendOrPostCallback CreateUserOperationCompleted;

    private System.Threading.SendOrPostCallback SaveUserOperationCompleted;

    private System.Threading.SendOrPostCallback EnrollUserOperationCompleted;

    private System.Threading.SendOrPostCallback GetUserFacebookOperationCompleted;

    private System.Threading.SendOrPostCallback GetUserOperationCompleted;

    private System.Threading.SendOrPostCallback GetOrganizerOperationCompleted;

    private System.Threading.SendOrPostCallback GetAvailableTicketsOperationCompleted;

    private System.Threading.SendOrPostCallback GetAvailableTicketsAndConcessionOperationCompleted;

    private System.Threading.SendOrPostCallback GetConcessionCashedOperationCompleted;

    private System.Threading.SendOrPostCallback GetConcession2OperationCompleted;

    private System.Threading.SendOrPostCallback GetConcessionOperationCompleted;

    private System.Threading.SendOrPostCallback GetTransactionFeesOperationCompleted;

    private System.Threading.SendOrPostCallback BlockSeatsOperationCompleted;

    private System.Threading.SendOrPostCallback BlockSeats_v2OperationCompleted;

    private System.Threading.SendOrPostCallback AddConcessionOperationCompleted;

    private System.Threading.SendOrPostCallback AddVoucherOperationCompleted;

    private System.Threading.SendOrPostCallback MoveSeatsOperationCompleted;

    private System.Threading.SendOrPostCallback GetTransactionOperationCompleted;

    private System.Threading.SendOrPostCallback ReserveOperationCompleted;

    private System.Threading.SendOrPostCallback CancelReservationOperationCompleted;

    private System.Threading.SendOrPostCallback CancelTransactionOperationCompleted;

    private System.Threading.SendOrPostCallback CancelTransaction_NoSessionOperationCompleted;

    private System.Threading.SendOrPostCallback PreBookOperationCompleted;

    /// <remarks/>
    public TicketGateClientOld()
    {
        this.Url = "http://biograf.ebillet.dk/systemnative/ticketgate.asmx";
    }

    public AuthHeader AuthHeaderValue
    {
        get
        {
            return this.authHeaderValueField;
        }
        set
        {
            this.authHeaderValueField = value;
        }
    }

    /// <remarks/>
    public event BookCompletedEventHandler BookCompleted;

    /// <remarks/>
    public event GetHistoryCompletedEventHandler GetHistoryCompleted;

    /// <remarks/>
    public event ActivateReservationCompletedEventHandler ActivateReservationCompleted;

    /// <remarks/>
    public event GetReservationInfoCompletedEventHandler GetReservationInfoCompleted;

    /// <remarks/>
    public event SeatsImageCompletedEventHandler SeatsImageCompleted;

    /// <remarks/>
    public event SendTestReceiptCompletedEventHandler SendTestReceiptCompleted;

    /// <remarks/>
    public event OnDemandCreateCompletedEventHandler OnDemandCreateCompleted;

    /// <remarks/>
    public event OnDemandChangeCompletedEventHandler OnDemandChangeCompleted;

    /// <remarks/>
    public event OnDemandReleaseCompletedEventHandler OnDemandReleaseCompleted;

    /// <remarks/>
    public event OnDemandAddOnCompletedEventHandler OnDemandAddOnCompleted;

    /// <remarks/>
    public event NotifyBuyerAboutRefundCompletedEventHandler NotifyBuyerAboutRefundCompleted;

    /// <remarks/>
    public event OnDemandAllocateCompletedEventHandler OnDemandAllocateCompleted;

    /// <remarks/>
    public event CheckUserCompletedEventHandler CheckUserCompleted;

    /// <remarks/>
    public event CreateUserCompletedEventHandler CreateUserCompleted;

    /// <remarks/>
    public event SaveUserCompletedEventHandler SaveUserCompleted;

    /// <remarks/>
    public event EnrollUserCompletedEventHandler EnrollUserCompleted;

    /// <remarks/>
    public event GetUserFacebookCompletedEventHandler GetUserFacebookCompleted;

    /// <remarks/>
    public event GetUserCompletedEventHandler GetUserCompleted;

    /// <remarks/>
    public event GetOrganizerCompletedEventHandler GetOrganizerCompleted;

    /// <remarks/>
    public event GetAvailableTicketsCompletedEventHandler GetAvailableTicketsCompleted;

    /// <remarks/>
    public event GetAvailableTicketsAndConcessionCompletedEventHandler GetAvailableTicketsAndConcessionCompleted;

    /// <remarks/>
    public event GetConcessionCashedCompletedEventHandler GetConcessionCashedCompleted;

    /// <remarks/>
    public event GetConcession2CompletedEventHandler GetConcession2Completed;

    /// <remarks/>
    public event GetConcessionCompletedEventHandler GetConcessionCompleted;

    /// <remarks/>
    public event GetTransactionFeesCompletedEventHandler GetTransactionFeesCompleted;

    /// <remarks/>
    public event BlockSeatsCompletedEventHandler BlockSeatsCompleted;

    /// <remarks/>
    public event BlockSeats_v2CompletedEventHandler BlockSeats_v2Completed;

    /// <remarks/>
    public event AddConcessionCompletedEventHandler AddConcessionCompleted;

    /// <remarks/>
    public event AddVoucherCompletedEventHandler AddVoucherCompleted;

    /// <remarks/>
    public event MoveSeatsCompletedEventHandler MoveSeatsCompleted;

    /// <remarks/>
    public event GetTransactionCompletedEventHandler GetTransactionCompleted;

    /// <remarks/>
    public event ReserveCompletedEventHandler ReserveCompleted;

    /// <remarks/>
    public event CancelReservationCompletedEventHandler CancelReservationCompleted;

    /// <remarks/>
    public event CancelTransactionCompletedEventHandler CancelTransactionCompleted;

    /// <remarks/>
    public event CancelTransaction_NoSessionCompletedEventHandler CancelTransaction_NoSessionCompleted;

    /// <remarks/>
    public event PreBookCompletedEventHandler PreBookCompleted;

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/Book", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode Book(
                int TransactionID,
                string UserID,
                string Phone,
                string Name,
                string Password,
                string EMail,
                int CardHolder,
                string Reference,
                string OrderId,
                int Amount,
                string HostAddress,
                int QuickUser,
                string Newsletter,
                [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> bSendReceipt,
                string Zipcode,
                string Note)
    {
        object[] results = this.Invoke("Book", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    Reference,
                    OrderId,
                    Amount,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    bSendReceipt,
                    Zipcode,
                    Note});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginBook(
                int TransactionID,
                string UserID,
                string Phone,
                string Name,
                string Password,
                string EMail,
                int CardHolder,
                string Reference,
                string OrderId,
                int Amount,
                string HostAddress,
                int QuickUser,
                string Newsletter,
                System.Nullable<bool> bSendReceipt,
                string Zipcode,
                string Note,
                System.AsyncCallback callback,
                object asyncState)
    {
        return this.BeginInvoke("Book", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    Reference,
                    OrderId,
                    Amount,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    bSendReceipt,
                    Zipcode,
                    Note}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndBook(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void BookAsync(
                int TransactionID,
                string UserID,
                string Phone,
                string Name,
                string Password,
                string EMail,
                int CardHolder,
                string Reference,
                string OrderId,
                int Amount,
                string HostAddress,
                int QuickUser,
                string Newsletter,
                System.Nullable<bool> bSendReceipt,
                string Zipcode,
                string Note)
    {
        this.BookAsync(TransactionID, UserID, Phone, Name, Password, EMail, CardHolder, Reference, OrderId, Amount, HostAddress, QuickUser, Newsletter, bSendReceipt, Zipcode, Note, null);
    }

    /// <remarks/>
    public void BookAsync(
                int TransactionID,
                string UserID,
                string Phone,
                string Name,
                string Password,
                string EMail,
                int CardHolder,
                string Reference,
                string OrderId,
                int Amount,
                string HostAddress,
                int QuickUser,
                string Newsletter,
                System.Nullable<bool> bSendReceipt,
                string Zipcode,
                string Note,
                object userState)
    {
        if ((this.BookOperationCompleted == null))
        {
            this.BookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookOperationCompleted);
        }
        this.InvokeAsync("Book", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    Reference,
                    OrderId,
                    Amount,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    bSendReceipt,
                    Zipcode,
                    Note}, this.BookOperationCompleted, userState);
    }

    private void OnBookOperationCompleted(object arg)
    {
        if ((this.BookCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BookCompleted(this, new BookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetHistory", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetHistory(string UserId, int CardHolder, string Phone, string Password, int TransactionType, System.DateTime Date, int QuickUser)
    {
        object[] results = this.Invoke("GetHistory", new object[] {
                    UserId,
                    CardHolder,
                    Phone,
                    Password,
                    TransactionType,
                    Date,
                    QuickUser});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetHistory(string UserId, int CardHolder, string Phone, string Password, int TransactionType, System.DateTime Date, int QuickUser, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetHistory", new object[] {
                    UserId,
                    CardHolder,
                    Phone,
                    Password,
                    TransactionType,
                    Date,
                    QuickUser}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetHistory(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetHistoryAsync(string UserId, int CardHolder, string Phone, string Password, int TransactionType, System.DateTime Date, int QuickUser)
    {
        this.GetHistoryAsync(UserId, CardHolder, Phone, Password, TransactionType, Date, QuickUser, null);
    }

    /// <remarks/>
    public void GetHistoryAsync(string UserId, int CardHolder, string Phone, string Password, int TransactionType, System.DateTime Date, int QuickUser, object userState)
    {
        if ((this.GetHistoryOperationCompleted == null))
        {
            this.GetHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryOperationCompleted);
        }
        this.InvokeAsync("GetHistory", new object[] {
                    UserId,
                    CardHolder,
                    Phone,
                    Password,
                    TransactionType,
                    Date,
                    QuickUser}, this.GetHistoryOperationCompleted, userState);
    }

    private void OnGetHistoryOperationCompleted(object arg)
    {
        if ((this.GetHistoryCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetHistoryCompleted(this, new GetHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/ActivateReservation", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode ActivateReservation(int ReservationId)
    {
        object[] results = this.Invoke("ActivateReservation", new object[] {
                    ReservationId});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginActivateReservation(int ReservationId, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("ActivateReservation", new object[] {
                    ReservationId}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndActivateReservation(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void ActivateReservationAsync(int ReservationId)
    {
        this.ActivateReservationAsync(ReservationId, null);
    }

    /// <remarks/>
    public void ActivateReservationAsync(int ReservationId, object userState)
    {
        if ((this.ActivateReservationOperationCompleted == null))
        {
            this.ActivateReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateReservationOperationCompleted);
        }
        this.InvokeAsync("ActivateReservation", new object[] {
                    ReservationId}, this.ActivateReservationOperationCompleted, userState);
    }

    private void OnActivateReservationOperationCompleted(object arg)
    {
        if ((this.ActivateReservationCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ActivateReservationCompleted(this, new ActivateReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetReservationInfo", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetReservationInfo(int ReservationId)
    {
        object[] results = this.Invoke("GetReservationInfo", new object[] {
                    ReservationId});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetReservationInfo(int ReservationId, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetReservationInfo", new object[] {
                    ReservationId}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetReservationInfo(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetReservationInfoAsync(int ReservationId)
    {
        this.GetReservationInfoAsync(ReservationId, null);
    }

    /// <remarks/>
    public void GetReservationInfoAsync(int ReservationId, object userState)
    {
        if ((this.GetReservationInfoOperationCompleted == null))
        {
            this.GetReservationInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReservationInfoOperationCompleted);
        }
        this.InvokeAsync("GetReservationInfo", new object[] {
                    ReservationId}, this.GetReservationInfoOperationCompleted, userState);
    }

    private void OnGetReservationInfoOperationCompleted(object arg)
    {
        if ((this.GetReservationInfoCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetReservationInfoCompleted(this, new GetReservationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/SeatsImage", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
    public byte[] SeatsImage()
    {
        object[] results = this.Invoke("SeatsImage", new object[0]);
        return ((byte[])(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginSeatsImage(System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("SeatsImage", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public byte[] EndSeatsImage(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((byte[])(results[0]));
    }

    /// <remarks/>
    public void SeatsImageAsync()
    {
        this.SeatsImageAsync(null);
    }

    /// <remarks/>
    public void SeatsImageAsync(object userState)
    {
        if ((this.SeatsImageOperationCompleted == null))
        {
            this.SeatsImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeatsImageOperationCompleted);
        }
        this.InvokeAsync("SeatsImage", new object[0], this.SeatsImageOperationCompleted, userState);
    }

    private void OnSeatsImageOperationCompleted(object arg)
    {
        if ((this.SeatsImageCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SeatsImageCompleted(this, new SeatsImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/SendTestReceipt", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool SendTestReceipt(string strMailRecipient, bool reservation)
    {
        object[] results = this.Invoke("SendTestReceipt", new object[] {
                    strMailRecipient,
                    reservation});
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginSendTestReceipt(string strMailRecipient, bool reservation, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("SendTestReceipt", new object[] {
                    strMailRecipient,
                    reservation}, callback, asyncState);
    }

    /// <remarks/>
    public bool EndSendTestReceipt(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public void SendTestReceiptAsync(string strMailRecipient, bool reservation)
    {
        this.SendTestReceiptAsync(strMailRecipient, reservation, null);
    }

    /// <remarks/>
    public void SendTestReceiptAsync(string strMailRecipient, bool reservation, object userState)
    {
        if ((this.SendTestReceiptOperationCompleted == null))
        {
            this.SendTestReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTestReceiptOperationCompleted);
        }
        this.InvokeAsync("SendTestReceipt", new object[] {
                    strMailRecipient,
                    reservation}, this.SendTestReceiptOperationCompleted, userState);
    }

    private void OnSendTestReceiptOperationCompleted(object arg)
    {
        if ((this.SendTestReceiptCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SendTestReceiptCompleted(this, new SendTestReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/OnDemandCreate", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DOD_Response OnDemandCreate(int nOrgNo, System.DateTime ArrTime, int LocationNo, int Price, int MinSale, System.DateTime MinSaleExpires)
    {
        object[] results = this.Invoke("OnDemandCreate", new object[] {
                    nOrgNo,
                    ArrTime,
                    LocationNo,
                    Price,
                    MinSale,
                    MinSaleExpires});
        return ((DOD_Response)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginOnDemandCreate(int nOrgNo, System.DateTime ArrTime, int LocationNo, int Price, int MinSale, System.DateTime MinSaleExpires, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("OnDemandCreate", new object[] {
                    nOrgNo,
                    ArrTime,
                    LocationNo,
                    Price,
                    MinSale,
                    MinSaleExpires}, callback, asyncState);
    }

    /// <remarks/>
    public DOD_Response EndOnDemandCreate(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((DOD_Response)(results[0]));
    }

    /// <remarks/>
    public void OnDemandCreateAsync(int nOrgNo, System.DateTime ArrTime, int LocationNo, int Price, int MinSale, System.DateTime MinSaleExpires)
    {
        this.OnDemandCreateAsync(nOrgNo, ArrTime, LocationNo, Price, MinSale, MinSaleExpires, null);
    }

    /// <remarks/>
    public void OnDemandCreateAsync(int nOrgNo, System.DateTime ArrTime, int LocationNo, int Price, int MinSale, System.DateTime MinSaleExpires, object userState)
    {
        if ((this.OnDemandCreateOperationCompleted == null))
        {
            this.OnDemandCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDemandCreateOperationCompleted);
        }
        this.InvokeAsync("OnDemandCreate", new object[] {
                    nOrgNo,
                    ArrTime,
                    LocationNo,
                    Price,
                    MinSale,
                    MinSaleExpires}, this.OnDemandCreateOperationCompleted, userState);
    }

    private void OnOnDemandCreateOperationCompleted(object arg)
    {
        if ((this.OnDemandCreateCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OnDemandCreateCompleted(this, new OnDemandCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/OnDemandChange", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DOD_Response OnDemandChange(int orgNo, int arrangementNo, int webMovieNo, int addOnPrice, string info)
    {
        object[] results = this.Invoke("OnDemandChange", new object[] {
                    orgNo,
                    arrangementNo,
                    webMovieNo,
                    addOnPrice,
                    info});
        return ((DOD_Response)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginOnDemandChange(int orgNo, int arrangementNo, int webMovieNo, int addOnPrice, string info, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("OnDemandChange", new object[] {
                    orgNo,
                    arrangementNo,
                    webMovieNo,
                    addOnPrice,
                    info}, callback, asyncState);
    }

    /// <remarks/>
    public DOD_Response EndOnDemandChange(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((DOD_Response)(results[0]));
    }

    /// <remarks/>
    public void OnDemandChangeAsync(int orgNo, int arrangementNo, int webMovieNo, int addOnPrice, string info)
    {
        this.OnDemandChangeAsync(orgNo, arrangementNo, webMovieNo, addOnPrice, info, null);
    }

    /// <remarks/>
    public void OnDemandChangeAsync(int orgNo, int arrangementNo, int webMovieNo, int addOnPrice, string info, object userState)
    {
        if ((this.OnDemandChangeOperationCompleted == null))
        {
            this.OnDemandChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDemandChangeOperationCompleted);
        }
        this.InvokeAsync("OnDemandChange", new object[] {
                    orgNo,
                    arrangementNo,
                    webMovieNo,
                    addOnPrice,
                    info}, this.OnDemandChangeOperationCompleted, userState);
    }

    private void OnOnDemandChangeOperationCompleted(object arg)
    {
        if ((this.OnDemandChangeCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OnDemandChangeCompleted(this, new OnDemandChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/OnDemandRelease", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool OnDemandRelease()
    {
        object[] results = this.Invoke("OnDemandRelease", new object[0]);
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginOnDemandRelease(System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("OnDemandRelease", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public bool EndOnDemandRelease(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public void OnDemandReleaseAsync()
    {
        this.OnDemandReleaseAsync(null);
    }

    /// <remarks/>
    public void OnDemandReleaseAsync(object userState)
    {
        if ((this.OnDemandReleaseOperationCompleted == null))
        {
            this.OnDemandReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDemandReleaseOperationCompleted);
        }
        this.InvokeAsync("OnDemandRelease", new object[0], this.OnDemandReleaseOperationCompleted, userState);
    }

    private void OnOnDemandReleaseOperationCompleted(object arg)
    {
        if ((this.OnDemandReleaseCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OnDemandReleaseCompleted(this, new OnDemandReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/OnDemandAddOn", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool OnDemandAddOn(bool selected)
    {
        object[] results = this.Invoke("OnDemandAddOn", new object[] {
                    selected});
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginOnDemandAddOn(bool selected, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("OnDemandAddOn", new object[] {
                    selected}, callback, asyncState);
    }

    /// <remarks/>
    public bool EndOnDemandAddOn(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks/>
    public void OnDemandAddOnAsync(bool selected)
    {
        this.OnDemandAddOnAsync(selected, null);
    }

    /// <remarks/>
    public void OnDemandAddOnAsync(bool selected, object userState)
    {
        if ((this.OnDemandAddOnOperationCompleted == null))
        {
            this.OnDemandAddOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDemandAddOnOperationCompleted);
        }
        this.InvokeAsync("OnDemandAddOn", new object[] {
                    selected}, this.OnDemandAddOnOperationCompleted, userState);
    }

    private void OnOnDemandAddOnOperationCompleted(object arg)
    {
        if ((this.OnDemandAddOnCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OnDemandAddOnCompleted(this, new OnDemandAddOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/NotifyBuyerAboutRefund", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode NotifyBuyerAboutRefund(string strBuycode, int nAmount, int nUnRefundableAmount)
    {
        object[] results = this.Invoke("NotifyBuyerAboutRefund", new object[] {
                    strBuycode,
                    nAmount,
                    nUnRefundableAmount});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginNotifyBuyerAboutRefund(string strBuycode, int nAmount, int nUnRefundableAmount, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("NotifyBuyerAboutRefund", new object[] {
                    strBuycode,
                    nAmount,
                    nUnRefundableAmount}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndNotifyBuyerAboutRefund(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void NotifyBuyerAboutRefundAsync(string strBuycode, int nAmount, int nUnRefundableAmount)
    {
        this.NotifyBuyerAboutRefundAsync(strBuycode, nAmount, nUnRefundableAmount, null);
    }

    /// <remarks/>
    public void NotifyBuyerAboutRefundAsync(string strBuycode, int nAmount, int nUnRefundableAmount, object userState)
    {
        if ((this.NotifyBuyerAboutRefundOperationCompleted == null))
        {
            this.NotifyBuyerAboutRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyBuyerAboutRefundOperationCompleted);
        }
        this.InvokeAsync("NotifyBuyerAboutRefund", new object[] {
                    strBuycode,
                    nAmount,
                    nUnRefundableAmount}, this.NotifyBuyerAboutRefundOperationCompleted, userState);
    }

    private void OnNotifyBuyerAboutRefundOperationCompleted(object arg)
    {
        if ((this.NotifyBuyerAboutRefundCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NotifyBuyerAboutRefundCompleted(this, new NotifyBuyerAboutRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/OnDemandAllocate", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public OnDemandAllocate_Response OnDemandAllocate(int arrangementNo, int orgNo, int webMovieNo)
    {
        object[] results = this.Invoke("OnDemandAllocate", new object[] {
                    arrangementNo,
                    orgNo,
                    webMovieNo});
        return ((OnDemandAllocate_Response)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginOnDemandAllocate(int arrangementNo, int orgNo, int webMovieNo, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("OnDemandAllocate", new object[] {
                    arrangementNo,
                    orgNo,
                    webMovieNo}, callback, asyncState);
    }

    /// <remarks/>
    public OnDemandAllocate_Response EndOnDemandAllocate(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((OnDemandAllocate_Response)(results[0]));
    }

    /// <remarks/>
    public void OnDemandAllocateAsync(int arrangementNo, int orgNo, int webMovieNo)
    {
        this.OnDemandAllocateAsync(arrangementNo, orgNo, webMovieNo, null);
    }

    /// <remarks/>
    public void OnDemandAllocateAsync(int arrangementNo, int orgNo, int webMovieNo, object userState)
    {
        if ((this.OnDemandAllocateOperationCompleted == null))
        {
            this.OnDemandAllocateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnDemandAllocateOperationCompleted);
        }
        this.InvokeAsync("OnDemandAllocate", new object[] {
                    arrangementNo,
                    orgNo,
                    webMovieNo}, this.OnDemandAllocateOperationCompleted, userState);
    }

    private void OnOnDemandAllocateOperationCompleted(object arg)
    {
        if ((this.OnDemandAllocateCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OnDemandAllocateCompleted(this, new OnDemandAllocateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/CheckUser", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode CheckUser(string EMail, string Phone, string CountryCodeNo)
    {
        object[] results = this.Invoke("CheckUser", new object[] {
                    EMail,
                    Phone,
                    CountryCodeNo});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginCheckUser(string EMail, string Phone, string CountryCodeNo, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("CheckUser", new object[] {
                    EMail,
                    Phone,
                    CountryCodeNo}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndCheckUser(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void CheckUserAsync(string EMail, string Phone, string CountryCodeNo)
    {
        this.CheckUserAsync(EMail, Phone, CountryCodeNo, null);
    }

    /// <remarks/>
    public void CheckUserAsync(string EMail, string Phone, string CountryCodeNo, object userState)
    {
        if ((this.CheckUserOperationCompleted == null))
        {
            this.CheckUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserOperationCompleted);
        }
        this.InvokeAsync("CheckUser", new object[] {
                    EMail,
                    Phone,
                    CountryCodeNo}, this.CheckUserOperationCompleted, userState);
    }

    private void OnCheckUserOperationCompleted(object arg)
    {
        if ((this.CheckUserCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckUserCompleted(this, new CheckUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/CreateUser", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode CreateUser(int Type, string FirstName, string LastName, string EMail, string Password, string Address, string City, string ZipCode, string Country, string Phone, bool IsMobile, string CountryCodeNo)
    {
        object[] results = this.Invoke("CreateUser", new object[] {
                    Type,
                    FirstName,
                    LastName,
                    EMail,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    IsMobile,
                    CountryCodeNo});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginCreateUser(int Type, string FirstName, string LastName, string EMail, string Password, string Address, string City, string ZipCode, string Country, string Phone, bool IsMobile, string CountryCodeNo, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("CreateUser", new object[] {
                    Type,
                    FirstName,
                    LastName,
                    EMail,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    IsMobile,
                    CountryCodeNo}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndCreateUser(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void CreateUserAsync(int Type, string FirstName, string LastName, string EMail, string Password, string Address, string City, string ZipCode, string Country, string Phone, bool IsMobile, string CountryCodeNo)
    {
        this.CreateUserAsync(Type, FirstName, LastName, EMail, Password, Address, City, ZipCode, Country, Phone, IsMobile, CountryCodeNo, null);
    }

    /// <remarks/>
    public void CreateUserAsync(int Type, string FirstName, string LastName, string EMail, string Password, string Address, string City, string ZipCode, string Country, string Phone, bool IsMobile, string CountryCodeNo, object userState)
    {
        if ((this.CreateUserOperationCompleted == null))
        {
            this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
        }
        this.InvokeAsync("CreateUser", new object[] {
                    Type,
                    FirstName,
                    LastName,
                    EMail,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    IsMobile,
                    CountryCodeNo}, this.CreateUserOperationCompleted, userState);
    }

    private void OnCreateUserOperationCompleted(object arg)
    {
        if ((this.CreateUserCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/SaveUser", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode SaveUser(string Key, int No, string FirstName, string LastName, string EMail, string OldPassword, string Password, string Address, string City, string ZipCode, string Country, string Phone, string FacebookId)
    {
        object[] results = this.Invoke("SaveUser", new object[] {
                    Key,
                    No,
                    FirstName,
                    LastName,
                    EMail,
                    OldPassword,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    FacebookId});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginSaveUser(string Key, int No, string FirstName, string LastName, string EMail, string OldPassword, string Password, string Address, string City, string ZipCode, string Country, string Phone, string FacebookId, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("SaveUser", new object[] {
                    Key,
                    No,
                    FirstName,
                    LastName,
                    EMail,
                    OldPassword,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    FacebookId}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndSaveUser(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void SaveUserAsync(string Key, int No, string FirstName, string LastName, string EMail, string OldPassword, string Password, string Address, string City, string ZipCode, string Country, string Phone, string FacebookId)
    {
        this.SaveUserAsync(Key, No, FirstName, LastName, EMail, OldPassword, Password, Address, City, ZipCode, Country, Phone, FacebookId, null);
    }

    /// <remarks/>
    public void SaveUserAsync(string Key, int No, string FirstName, string LastName, string EMail, string OldPassword, string Password, string Address, string City, string ZipCode, string Country, string Phone, string FacebookId, object userState)
    {
        if ((this.SaveUserOperationCompleted == null))
        {
            this.SaveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserOperationCompleted);
        }
        this.InvokeAsync("SaveUser", new object[] {
                    Key,
                    No,
                    FirstName,
                    LastName,
                    EMail,
                    OldPassword,
                    Password,
                    Address,
                    City,
                    ZipCode,
                    Country,
                    Phone,
                    FacebookId}, this.SaveUserOperationCompleted, userState);
    }

    private void OnSaveUserOperationCompleted(object arg)
    {
        if ((this.SaveUserCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SaveUserCompleted(this, new SaveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/EnrollUser", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode EnrollUser(string Key, int No, string EMail, int Organizer, bool Enroll)
    {
        object[] results = this.Invoke("EnrollUser", new object[] {
                    Key,
                    No,
                    EMail,
                    Organizer,
                    Enroll});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginEnrollUser(string Key, int No, string EMail, int Organizer, bool Enroll, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("EnrollUser", new object[] {
                    Key,
                    No,
                    EMail,
                    Organizer,
                    Enroll}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndEnrollUser(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void EnrollUserAsync(string Key, int No, string EMail, int Organizer, bool Enroll)
    {
        this.EnrollUserAsync(Key, No, EMail, Organizer, Enroll, null);
    }

    /// <remarks/>
    public void EnrollUserAsync(string Key, int No, string EMail, int Organizer, bool Enroll, object userState)
    {
        if ((this.EnrollUserOperationCompleted == null))
        {
            this.EnrollUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrollUserOperationCompleted);
        }
        this.InvokeAsync("EnrollUser", new object[] {
                    Key,
                    No,
                    EMail,
                    Organizer,
                    Enroll}, this.EnrollUserOperationCompleted, userState);
    }

    private void OnEnrollUserOperationCompleted(object arg)
    {
        if ((this.EnrollUserCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.EnrollUserCompleted(this, new EnrollUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetUserFacebook", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUserFacebook(string FacebookId)
    {
        object[] results = this.Invoke("GetUserFacebook", new object[] {
                    FacebookId});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetUserFacebook(string FacebookId, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetUserFacebook", new object[] {
                    FacebookId}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetUserFacebook(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetUserFacebookAsync(string FacebookId)
    {
        this.GetUserFacebookAsync(FacebookId, null);
    }

    /// <remarks/>
    public void GetUserFacebookAsync(string FacebookId, object userState)
    {
        if ((this.GetUserFacebookOperationCompleted == null))
        {
            this.GetUserFacebookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserFacebookOperationCompleted);
        }
        this.InvokeAsync("GetUserFacebook", new object[] {
                    FacebookId}, this.GetUserFacebookOperationCompleted, userState);
    }

    private void OnGetUserFacebookOperationCompleted(object arg)
    {
        if ((this.GetUserFacebookCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserFacebookCompleted(this, new GetUserFacebookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetUser", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetUser(string EMail, string Password, string Phone, string CountryCodeNo, string ID)
    {
        object[] results = this.Invoke("GetUser", new object[] {
                    EMail,
                    Password,
                    Phone,
                    CountryCodeNo,
                    ID});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetUser(string EMail, string Password, string Phone, string CountryCodeNo, string ID, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetUser", new object[] {
                    EMail,
                    Password,
                    Phone,
                    CountryCodeNo,
                    ID}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetUser(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetUserAsync(string EMail, string Password, string Phone, string CountryCodeNo, string ID)
    {
        this.GetUserAsync(EMail, Password, Phone, CountryCodeNo, ID, null);
    }

    /// <remarks/>
    public void GetUserAsync(string EMail, string Password, string Phone, string CountryCodeNo, string ID, object userState)
    {
        if ((this.GetUserOperationCompleted == null))
        {
            this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
        }
        this.InvokeAsync("GetUser", new object[] {
                    EMail,
                    Password,
                    Phone,
                    CountryCodeNo,
                    ID}, this.GetUserOperationCompleted, userState);
    }

    private void OnGetUserOperationCompleted(object arg)
    {
        if ((this.GetUserCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetOrganizer", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetOrganizer(int Organizer, int SiteType, string CustomerEmail)
    {
        object[] results = this.Invoke("GetOrganizer", new object[] {
                    Organizer,
                    SiteType,
                    CustomerEmail});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetOrganizer(int Organizer, int SiteType, string CustomerEmail, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetOrganizer", new object[] {
                    Organizer,
                    SiteType,
                    CustomerEmail}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetOrganizer(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetOrganizerAsync(int Organizer, int SiteType, string CustomerEmail)
    {
        this.GetOrganizerAsync(Organizer, SiteType, CustomerEmail, null);
    }

    /// <remarks/>
    public void GetOrganizerAsync(int Organizer, int SiteType, string CustomerEmail, object userState)
    {
        if ((this.GetOrganizerOperationCompleted == null))
        {
            this.GetOrganizerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizerOperationCompleted);
        }
        this.InvokeAsync("GetOrganizer", new object[] {
                    Organizer,
                    SiteType,
                    CustomerEmail}, this.GetOrganizerOperationCompleted, userState);
    }

    private void OnGetOrganizerOperationCompleted(object arg)
    {
        if ((this.GetOrganizerCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetOrganizerCompleted(this, new GetOrganizerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetAvailableTickets", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetAvailableTickets(int Organizer, int Arrangement, int Cardholder)
    {
        object[] results = this.Invoke("GetAvailableTickets", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetAvailableTickets(int Organizer, int Arrangement, int Cardholder, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetAvailableTickets", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetAvailableTickets(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetAvailableTicketsAsync(int Organizer, int Arrangement, int Cardholder)
    {
        this.GetAvailableTicketsAsync(Organizer, Arrangement, Cardholder, null);
    }

    /// <remarks/>
    public void GetAvailableTicketsAsync(int Organizer, int Arrangement, int Cardholder, object userState)
    {
        if ((this.GetAvailableTicketsOperationCompleted == null))
        {
            this.GetAvailableTicketsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableTicketsOperationCompleted);
        }
        this.InvokeAsync("GetAvailableTickets", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, this.GetAvailableTicketsOperationCompleted, userState);
    }

    private void OnGetAvailableTicketsOperationCompleted(object arg)
    {
        if ((this.GetAvailableTicketsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAvailableTicketsCompleted(this, new GetAvailableTicketsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetAvailableTicketsAndConcession", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetAvailableTicketsAndConcession(int Organizer, int Arrangement, int Cardholder, string strDiscountCode)
    {
        object[] results = this.Invoke("GetAvailableTicketsAndConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder,
                    strDiscountCode});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetAvailableTicketsAndConcession(int Organizer, int Arrangement, int Cardholder, string strDiscountCode, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetAvailableTicketsAndConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder,
                    strDiscountCode}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetAvailableTicketsAndConcession(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetAvailableTicketsAndConcessionAsync(int Organizer, int Arrangement, int Cardholder, string strDiscountCode)
    {
        this.GetAvailableTicketsAndConcessionAsync(Organizer, Arrangement, Cardholder, strDiscountCode, null);
    }

    /// <remarks/>
    public void GetAvailableTicketsAndConcessionAsync(int Organizer, int Arrangement, int Cardholder, string strDiscountCode, object userState)
    {
        if ((this.GetAvailableTicketsAndConcessionOperationCompleted == null))
        {
            this.GetAvailableTicketsAndConcessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableTicketsAndConcessionOperationCompleted);
        }
        this.InvokeAsync("GetAvailableTicketsAndConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder,
                    strDiscountCode}, this.GetAvailableTicketsAndConcessionOperationCompleted, userState);
    }

    private void OnGetAvailableTicketsAndConcessionOperationCompleted(object arg)
    {
        if ((this.GetAvailableTicketsAndConcessionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAvailableTicketsAndConcessionCompleted(this, new GetAvailableTicketsAndConcessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetConcessionCashed", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetConcessionCashed(int Organizer, int Arrangement, int Cardholder)
    {
        object[] results = this.Invoke("GetConcessionCashed", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetConcessionCashed(int Organizer, int Arrangement, int Cardholder, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetConcessionCashed", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetConcessionCashed(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetConcessionCashedAsync(int Organizer, int Arrangement, int Cardholder)
    {
        this.GetConcessionCashedAsync(Organizer, Arrangement, Cardholder, null);
    }

    /// <remarks/>
    public void GetConcessionCashedAsync(int Organizer, int Arrangement, int Cardholder, object userState)
    {
        if ((this.GetConcessionCashedOperationCompleted == null))
        {
            this.GetConcessionCashedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConcessionCashedOperationCompleted);
        }
        this.InvokeAsync("GetConcessionCashed", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, this.GetConcessionCashedOperationCompleted, userState);
    }

    private void OnGetConcessionCashedOperationCompleted(object arg)
    {
        if ((this.GetConcessionCashedCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConcessionCashedCompleted(this, new GetConcessionCashedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetConcession2", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetConcession2(int Organizer, int Arrangement, int Cardholder)
    {
        object[] results = this.Invoke("GetConcession2", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetConcession2(int Organizer, int Arrangement, int Cardholder, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetConcession2", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetConcession2(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetConcession2Async(int Organizer, int Arrangement, int Cardholder)
    {
        this.GetConcession2Async(Organizer, Arrangement, Cardholder, null);
    }

    /// <remarks/>
    public void GetConcession2Async(int Organizer, int Arrangement, int Cardholder, object userState)
    {
        if ((this.GetConcession2OperationCompleted == null))
        {
            this.GetConcession2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConcession2OperationCompleted);
        }
        this.InvokeAsync("GetConcession2", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, this.GetConcession2OperationCompleted, userState);
    }

    private void OnGetConcession2OperationCompleted(object arg)
    {
        if ((this.GetConcession2Completed != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConcession2Completed(this, new GetConcession2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetConcession", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetConcession(int Organizer, int Arrangement, int Cardholder)
    {
        object[] results = this.Invoke("GetConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetConcession(int Organizer, int Arrangement, int Cardholder, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetConcession(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetConcessionAsync(int Organizer, int Arrangement, int Cardholder)
    {
        this.GetConcessionAsync(Organizer, Arrangement, Cardholder, null);
    }

    /// <remarks/>
    public void GetConcessionAsync(int Organizer, int Arrangement, int Cardholder, object userState)
    {
        if ((this.GetConcessionOperationCompleted == null))
        {
            this.GetConcessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConcessionOperationCompleted);
        }
        this.InvokeAsync("GetConcession", new object[] {
                    Organizer,
                    Arrangement,
                    Cardholder}, this.GetConcessionOperationCompleted, userState);
    }

    private void OnGetConcessionOperationCompleted(object arg)
    {
        if ((this.GetConcessionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConcessionCompleted(this, new GetConcessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetTransactionFees", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetTransactionFees(int Organizer, int Arrangement)
    {
        object[] results = this.Invoke("GetTransactionFees", new object[] {
                    Organizer,
                    Arrangement});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetTransactionFees(int Organizer, int Arrangement, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetTransactionFees", new object[] {
                    Organizer,
                    Arrangement}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetTransactionFees(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetTransactionFeesAsync(int Organizer, int Arrangement)
    {
        this.GetTransactionFeesAsync(Organizer, Arrangement, null);
    }

    /// <remarks/>
    public void GetTransactionFeesAsync(int Organizer, int Arrangement, object userState)
    {
        if ((this.GetTransactionFeesOperationCompleted == null))
        {
            this.GetTransactionFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionFeesOperationCompleted);
        }
        this.InvokeAsync("GetTransactionFees", new object[] {
                    Organizer,
                    Arrangement}, this.GetTransactionFeesOperationCompleted, userState);
    }

    private void OnGetTransactionFeesOperationCompleted(object arg)
    {
        if ((this.GetTransactionFeesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTransactionFeesCompleted(this, new GetTransactionFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/BlockSeats", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode BlockSeats(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> DefaultTickets)
    {
        object[] results = this.Invoke("BlockSeats", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    DefaultTickets});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginBlockSeats(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, System.Nullable<int> DefaultTickets, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("BlockSeats", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    DefaultTickets}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndBlockSeats(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void BlockSeatsAsync(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, System.Nullable<int> DefaultTickets)
    {
        this.BlockSeatsAsync(TransactionID, Cardholder, HostAddress, Tickets, DefaultTickets, null);
    }

    /// <remarks/>
    public void BlockSeatsAsync(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, System.Nullable<int> DefaultTickets, object userState)
    {
        if ((this.BlockSeatsOperationCompleted == null))
        {
            this.BlockSeatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockSeatsOperationCompleted);
        }
        this.InvokeAsync("BlockSeats", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    DefaultTickets}, this.BlockSeatsOperationCompleted, userState);
    }

    private void OnBlockSeatsOperationCompleted(object arg)
    {
        if ((this.BlockSeatsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BlockSeatsCompleted(this, new BlockSeatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/BlockSeats_v2", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode BlockSeats_v2(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, string strBarcodes, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> DefaultTickets)
    {
        object[] results = this.Invoke("BlockSeats_v2", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    strBarcodes,
                    DefaultTickets});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginBlockSeats_v2(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, string strBarcodes, System.Nullable<int> DefaultTickets, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("BlockSeats_v2", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    strBarcodes,
                    DefaultTickets}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndBlockSeats_v2(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void BlockSeats_v2Async(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, string strBarcodes, System.Nullable<int> DefaultTickets)
    {
        this.BlockSeats_v2Async(TransactionID, Cardholder, HostAddress, Tickets, strBarcodes, DefaultTickets, null);
    }

    /// <remarks/>
    public void BlockSeats_v2Async(int TransactionID, int Cardholder, string HostAddress, System.Xml.XmlNode Tickets, string strBarcodes, System.Nullable<int> DefaultTickets, object userState)
    {
        if ((this.BlockSeats_v2OperationCompleted == null))
        {
            this.BlockSeats_v2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockSeats_v2OperationCompleted);
        }
        this.InvokeAsync("BlockSeats_v2", new object[] {
                    TransactionID,
                    Cardholder,
                    HostAddress,
                    Tickets,
                    strBarcodes,
                    DefaultTickets}, this.BlockSeats_v2OperationCompleted, userState);
    }

    private void OnBlockSeats_v2OperationCompleted(object arg)
    {
        if ((this.BlockSeats_v2Completed != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BlockSeats_v2Completed(this, new BlockSeats_v2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/AddConcession", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode AddConcession(int TransactionID, int Cardholder, int QuickUser, System.Xml.XmlNode Concessions)
    {
        object[] results = this.Invoke("AddConcession", new object[] {
                    TransactionID,
                    Cardholder,
                    QuickUser,
                    Concessions});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginAddConcession(int TransactionID, int Cardholder, int QuickUser, System.Xml.XmlNode Concessions, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("AddConcession", new object[] {
                    TransactionID,
                    Cardholder,
                    QuickUser,
                    Concessions}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndAddConcession(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void AddConcessionAsync(int TransactionID, int Cardholder, int QuickUser, System.Xml.XmlNode Concessions)
    {
        this.AddConcessionAsync(TransactionID, Cardholder, QuickUser, Concessions, null);
    }

    /// <remarks/>
    public void AddConcessionAsync(int TransactionID, int Cardholder, int QuickUser, System.Xml.XmlNode Concessions, object userState)
    {
        if ((this.AddConcessionOperationCompleted == null))
        {
            this.AddConcessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddConcessionOperationCompleted);
        }
        this.InvokeAsync("AddConcession", new object[] {
                    TransactionID,
                    Cardholder,
                    QuickUser,
                    Concessions}, this.AddConcessionOperationCompleted, userState);
    }

    private void OnAddConcessionOperationCompleted(object arg)
    {
        if ((this.AddConcessionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddConcessionCompleted(this, new AddConcessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/AddVoucher", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode AddVoucher(int TransactionID, int Cardholder, System.Xml.XmlNode BonusVouchers)
    {
        object[] results = this.Invoke("AddVoucher", new object[] {
                    TransactionID,
                    Cardholder,
                    BonusVouchers});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginAddVoucher(int TransactionID, int Cardholder, System.Xml.XmlNode BonusVouchers, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("AddVoucher", new object[] {
                    TransactionID,
                    Cardholder,
                    BonusVouchers}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndAddVoucher(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void AddVoucherAsync(int TransactionID, int Cardholder, System.Xml.XmlNode BonusVouchers)
    {
        this.AddVoucherAsync(TransactionID, Cardholder, BonusVouchers, null);
    }

    /// <remarks/>
    public void AddVoucherAsync(int TransactionID, int Cardholder, System.Xml.XmlNode BonusVouchers, object userState)
    {
        if ((this.AddVoucherOperationCompleted == null))
        {
            this.AddVoucherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVoucherOperationCompleted);
        }
        this.InvokeAsync("AddVoucher", new object[] {
                    TransactionID,
                    Cardholder,
                    BonusVouchers}, this.AddVoucherOperationCompleted, userState);
    }

    private void OnAddVoucherOperationCompleted(object arg)
    {
        if ((this.AddVoucherCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddVoucherCompleted(this, new AddVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/MoveSeats", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode MoveSeats(int TransactionID, int x, int y)
    {
        object[] results = this.Invoke("MoveSeats", new object[] {
                    TransactionID,
                    x,
                    y});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginMoveSeats(int TransactionID, int x, int y, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("MoveSeats", new object[] {
                    TransactionID,
                    x,
                    y}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndMoveSeats(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void MoveSeatsAsync(int TransactionID, int x, int y)
    {
        this.MoveSeatsAsync(TransactionID, x, y, null);
    }

    /// <remarks/>
    public void MoveSeatsAsync(int TransactionID, int x, int y, object userState)
    {
        if ((this.MoveSeatsOperationCompleted == null))
        {
            this.MoveSeatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveSeatsOperationCompleted);
        }
        this.InvokeAsync("MoveSeats", new object[] {
                    TransactionID,
                    x,
                    y}, this.MoveSeatsOperationCompleted, userState);
    }

    private void OnMoveSeatsOperationCompleted(object arg)
    {
        if ((this.MoveSeatsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.MoveSeatsCompleted(this, new MoveSeatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/GetTransaction", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode GetTransaction(int TransactionID, string OrderId)
    {
        object[] results = this.Invoke("GetTransaction", new object[] {
                    TransactionID,
                    OrderId});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginGetTransaction(int TransactionID, string OrderId, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("GetTransaction", new object[] {
                    TransactionID,
                    OrderId}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndGetTransaction(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void GetTransactionAsync(int TransactionID, string OrderId)
    {
        this.GetTransactionAsync(TransactionID, OrderId, null);
    }

    /// <remarks/>
    public void GetTransactionAsync(int TransactionID, string OrderId, object userState)
    {
        if ((this.GetTransactionOperationCompleted == null))
        {
            this.GetTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionOperationCompleted);
        }
        this.InvokeAsync("GetTransaction", new object[] {
                    TransactionID,
                    OrderId}, this.GetTransactionOperationCompleted, userState);
    }

    private void OnGetTransactionOperationCompleted(object arg)
    {
        if ((this.GetTransactionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTransactionCompleted(this, new GetTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/Reserve", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode Reserve(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, string HostAddress, int QuickUser, string Newsletter, bool Sms, string Zipcode, string Note)
    {
        object[] results = this.Invoke("Reserve", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    Sms,
                    Zipcode,
                    Note});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginReserve(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, string HostAddress, int QuickUser, string Newsletter, bool Sms, string Zipcode, string Note, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("Reserve", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    Sms,
                    Zipcode,
                    Note}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndReserve(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void ReserveAsync(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, string HostAddress, int QuickUser, string Newsletter, bool Sms, string Zipcode, string Note)
    {
        this.ReserveAsync(TransactionID, UserID, Phone, Name, Password, EMail, HostAddress, QuickUser, Newsletter, Sms, Zipcode, Note, null);
    }

    /// <remarks/>
    public void ReserveAsync(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, string HostAddress, int QuickUser, string Newsletter, bool Sms, string Zipcode, string Note, object userState)
    {
        if ((this.ReserveOperationCompleted == null))
        {
            this.ReserveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReserveOperationCompleted);
        }
        this.InvokeAsync("Reserve", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    HostAddress,
                    QuickUser,
                    Newsletter,
                    Sms,
                    Zipcode,
                    Note}, this.ReserveOperationCompleted, userState);
    }

    private void OnReserveOperationCompleted(object arg)
    {
        if ((this.ReserveCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReserveCompleted(this, new ReserveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/CancelReservation", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode CancelReservation(int ReservationNo, string UserID, string Phone, string Password, string HostAddress, int QuickUser)
    {
        object[] results = this.Invoke("CancelReservation", new object[] {
                    ReservationNo,
                    UserID,
                    Phone,
                    Password,
                    HostAddress,
                    QuickUser});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginCancelReservation(int ReservationNo, string UserID, string Phone, string Password, string HostAddress, int QuickUser, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("CancelReservation", new object[] {
                    ReservationNo,
                    UserID,
                    Phone,
                    Password,
                    HostAddress,
                    QuickUser}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndCancelReservation(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void CancelReservationAsync(int ReservationNo, string UserID, string Phone, string Password, string HostAddress, int QuickUser)
    {
        this.CancelReservationAsync(ReservationNo, UserID, Phone, Password, HostAddress, QuickUser, null);
    }

    /// <remarks/>
    public void CancelReservationAsync(int ReservationNo, string UserID, string Phone, string Password, string HostAddress, int QuickUser, object userState)
    {
        if ((this.CancelReservationOperationCompleted == null))
        {
            this.CancelReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelReservationOperationCompleted);
        }
        this.InvokeAsync("CancelReservation", new object[] {
                    ReservationNo,
                    UserID,
                    Phone,
                    Password,
                    HostAddress,
                    QuickUser}, this.CancelReservationOperationCompleted, userState);
    }

    private void OnCancelReservationOperationCompleted(object arg)
    {
        if ((this.CancelReservationCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelReservationCompleted(this, new CancelReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/CancelTransaction", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode CancelTransaction(int TransactionID)
    {
        object[] results = this.Invoke("CancelTransaction", new object[] {
                    TransactionID});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginCancelTransaction(int TransactionID, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("CancelTransaction", new object[] {
                    TransactionID}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndCancelTransaction(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void CancelTransactionAsync(int TransactionID)
    {
        this.CancelTransactionAsync(TransactionID, null);
    }

    /// <remarks/>
    public void CancelTransactionAsync(int TransactionID, object userState)
    {
        if ((this.CancelTransactionOperationCompleted == null))
        {
            this.CancelTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTransactionOperationCompleted);
        }
        this.InvokeAsync("CancelTransaction", new object[] {
                    TransactionID}, this.CancelTransactionOperationCompleted, userState);
    }

    private void OnCancelTransactionOperationCompleted(object arg)
    {
        if ((this.CancelTransactionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelTransactionCompleted(this, new CancelTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/CancelTransaction_NoSession", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode CancelTransaction_NoSession(int OrgNo, int TransactionID)
    {
        object[] results = this.Invoke("CancelTransaction_NoSession", new object[] {
                    OrgNo,
                    TransactionID});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginCancelTransaction_NoSession(int OrgNo, int TransactionID, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("CancelTransaction_NoSession", new object[] {
                    OrgNo,
                    TransactionID}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndCancelTransaction_NoSession(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void CancelTransaction_NoSessionAsync(int OrgNo, int TransactionID)
    {
        this.CancelTransaction_NoSessionAsync(OrgNo, TransactionID, null);
    }

    /// <remarks/>
    public void CancelTransaction_NoSessionAsync(int OrgNo, int TransactionID, object userState)
    {
        if ((this.CancelTransaction_NoSessionOperationCompleted == null))
        {
            this.CancelTransaction_NoSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTransaction_NoSessionOperationCompleted);
        }
        this.InvokeAsync("CancelTransaction_NoSession", new object[] {
                    OrgNo,
                    TransactionID}, this.CancelTransaction_NoSessionOperationCompleted, userState);
    }

    private void OnCancelTransaction_NoSessionOperationCompleted(object arg)
    {
        if ((this.CancelTransaction_NoSessionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelTransaction_NoSessionCompleted(this, new CancelTransaction_NoSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ebillet.dk/system/PreBook", RequestNamespace = "http://www.ebillet.dk/system/", ResponseNamespace = "http://www.ebillet.dk/system/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Xml.XmlNode PreBook(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, int CardHolder, string CreditCardCode, int QuickUser)
    {
        object[] results = this.Invoke("PreBook", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    CreditCardCode,
                    QuickUser});
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginPreBook(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, int CardHolder, string CreditCardCode, int QuickUser, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("PreBook", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    CreditCardCode,
                    QuickUser}, callback, asyncState);
    }

    /// <remarks/>
    public System.Xml.XmlNode EndPreBook(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Xml.XmlNode)(results[0]));
    }

    /// <remarks/>
    public void PreBookAsync(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, int CardHolder, string CreditCardCode, int QuickUser)
    {
        this.PreBookAsync(TransactionID, UserID, Phone, Name, Password, EMail, CardHolder, CreditCardCode, QuickUser, null);
    }

    /// <remarks/>
    public void PreBookAsync(int TransactionID, string UserID, string Phone, string Name, string Password, string EMail, int CardHolder, string CreditCardCode, int QuickUser, object userState)
    {
        if ((this.PreBookOperationCompleted == null))
        {
            this.PreBookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreBookOperationCompleted);
        }
        this.InvokeAsync("PreBook", new object[] {
                    TransactionID,
                    UserID,
                    Phone,
                    Name,
                    Password,
                    EMail,
                    CardHolder,
                    CreditCardCode,
                    QuickUser}, this.PreBookOperationCompleted, userState);
    }

    private void OnPreBookOperationCompleted(object arg)
    {
        if ((this.PreBookCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PreBookCompleted(this, new PreBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ebillet.dk/system/")]
[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.ebillet.dk/system/", IsNullable = false)]
public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader
{

    private string userNameField;

    private string passwordField;

    private string originNoField;

    private System.Xml.XmlAttribute[] anyAttrField;

    /// <remarks/>
    public string UserName
    {
        get
        {
            return this.userNameField;
        }
        set
        {
            this.userNameField = value;
        }
    }

    /// <remarks/>
    public string Password
    {
        get
        {
            return this.passwordField;
        }
        set
        {
            this.passwordField = value;
        }
    }

    /// <remarks/>
    public string OriginNo
    {
        get
        {
            return this.originNoField;
        }
        set
        {
            this.originNoField = value;
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlAnyAttributeAttribute()]
    public System.Xml.XmlAttribute[] AnyAttr
    {
        get
        {
            return this.anyAttrField;
        }
        set
        {
            this.anyAttrField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ebillet.dk/system/")]
public partial class OnDemandAllocate_Response
{

    private int resultField;

    private int errorCodeField;

    private string addOnDescriptionField;

    private decimal addOnPriceField;

    /// <remarks/>
    public int result
    {
        get
        {
            return this.resultField;
        }
        set
        {
            this.resultField = value;
        }
    }

    /// <remarks/>
    public int errorCode
    {
        get
        {
            return this.errorCodeField;
        }
        set
        {
            this.errorCodeField = value;
        }
    }

    /// <remarks/>
    public string AddOnDescription
    {
        get
        {
            return this.addOnDescriptionField;
        }
        set
        {
            this.addOnDescriptionField = value;
        }
    }

    /// <remarks/>
    public decimal AddOnPrice
    {
        get
        {
            return this.addOnPriceField;
        }
        set
        {
            this.addOnPriceField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.ebillet.dk/system/")]
public partial class DOD_Response
{

    private int resultField;

    private int errorCodeField;

    private int subErrorField;

    private string errorDescriptionField;

    private int arrangementNoField;

    private int soldCountField;

    /// <remarks/>
    public int result
    {
        get
        {
            return this.resultField;
        }
        set
        {
            this.resultField = value;
        }
    }

    /// <remarks/>
    public int errorCode
    {
        get
        {
            return this.errorCodeField;
        }
        set
        {
            this.errorCodeField = value;
        }
    }

    /// <remarks/>
    public int subError
    {
        get
        {
            return this.subErrorField;
        }
        set
        {
            this.subErrorField = value;
        }
    }

    /// <remarks/>
    public string errorDescription
    {
        get
        {
            return this.errorDescriptionField;
        }
        set
        {
            this.errorDescriptionField = value;
        }
    }

    /// <remarks/>
    public int arrangementNo
    {
        get
        {
            return this.arrangementNoField;
        }
        set
        {
            this.arrangementNoField = value;
        }
    }

    /// <remarks/>
    public int soldCount
    {
        get
        {
            return this.soldCountField;
        }
        set
        {
            this.soldCountField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void BookCompletedEventHandler(object sender, BookCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal BookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetHistoryCompletedEventHandler(object sender, GetHistoryCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ActivateReservationCompletedEventHandler(object sender, ActivateReservationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ActivateReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal ActivateReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetReservationInfoCompletedEventHandler(object sender, GetReservationInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetReservationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetReservationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SeatsImageCompletedEventHandler(object sender, SeatsImageCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SeatsImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal SeatsImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public byte[] Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SendTestReceiptCompletedEventHandler(object sender, SendTestReceiptCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SendTestReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal SendTestReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public bool Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void OnDemandCreateCompletedEventHandler(object sender, OnDemandCreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OnDemandCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal OnDemandCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public DOD_Response Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((DOD_Response)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void OnDemandChangeCompletedEventHandler(object sender, OnDemandChangeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OnDemandChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal OnDemandChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public DOD_Response Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((DOD_Response)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void OnDemandReleaseCompletedEventHandler(object sender, OnDemandReleaseCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OnDemandReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal OnDemandReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public bool Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void OnDemandAddOnCompletedEventHandler(object sender, OnDemandAddOnCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OnDemandAddOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal OnDemandAddOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public bool Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void NotifyBuyerAboutRefundCompletedEventHandler(object sender, NotifyBuyerAboutRefundCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NotifyBuyerAboutRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal NotifyBuyerAboutRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void OnDemandAllocateCompletedEventHandler(object sender, OnDemandAllocateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OnDemandAllocateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal OnDemandAllocateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public OnDemandAllocate_Response Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((OnDemandAllocate_Response)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CheckUserCompletedEventHandler(object sender, CheckUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal CheckUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SaveUserCompletedEventHandler(object sender, SaveUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SaveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal SaveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void EnrollUserCompletedEventHandler(object sender, EnrollUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class EnrollUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal EnrollUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetUserFacebookCompletedEventHandler(object sender, GetUserFacebookCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserFacebookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetUserFacebookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetOrganizerCompletedEventHandler(object sender, GetOrganizerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetOrganizerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetOrganizerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetAvailableTicketsCompletedEventHandler(object sender, GetAvailableTicketsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAvailableTicketsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetAvailableTicketsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetAvailableTicketsAndConcessionCompletedEventHandler(object sender, GetAvailableTicketsAndConcessionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAvailableTicketsAndConcessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetAvailableTicketsAndConcessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetConcessionCashedCompletedEventHandler(object sender, GetConcessionCashedCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConcessionCashedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetConcessionCashedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetConcession2CompletedEventHandler(object sender, GetConcession2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConcession2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetConcession2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetConcessionCompletedEventHandler(object sender, GetConcessionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConcessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetConcessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetTransactionFeesCompletedEventHandler(object sender, GetTransactionFeesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTransactionFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetTransactionFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void BlockSeatsCompletedEventHandler(object sender, BlockSeatsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BlockSeatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal BlockSeatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void BlockSeats_v2CompletedEventHandler(object sender, BlockSeats_v2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BlockSeats_v2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal BlockSeats_v2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void AddConcessionCompletedEventHandler(object sender, AddConcessionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddConcessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal AddConcessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void AddVoucherCompletedEventHandler(object sender, AddVoucherCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddVoucherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal AddVoucherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void MoveSeatsCompletedEventHandler(object sender, MoveSeatsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class MoveSeatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal MoveSeatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetTransactionCompletedEventHandler(object sender, GetTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal GetTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void ReserveCompletedEventHandler(object sender, ReserveCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReserveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal ReserveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CancelReservationCompletedEventHandler(object sender, CancelReservationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal CancelReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CancelTransactionCompletedEventHandler(object sender, CancelTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal CancelTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void CancelTransaction_NoSessionCompletedEventHandler(object sender, CancelTransaction_NoSessionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelTransaction_NoSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal CancelTransaction_NoSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void PreBookCompletedEventHandler(object sender, PreBookCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PreBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal PreBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Xml.XmlNode Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Xml.XmlNode)(this.results[0]));
        }
    }
}
